#!/usr/bin/env python
# coding: utf-8

# In[1]:


import re


# In[2]:


cell_lines = ["CellLine"]
old_dbs = []
new_dbs = []

for c in cell_lines:
    old_dbs.append(c + "_custom.fa")
    new_dbs.append("2TS_" + c + "_custom.fa")


# In[ ]:


for c in range(len(cell_lines)):
    
    # name of the fasta file you want to edit
    current_filename = old_dbs[c]

    # updated filename
    new_filename = new_dbs[c]

    # read fasta file into a string
    x = open(current_filename,'r')
    cline = x.read()
    x.close()

    # regex for matching individual variants
    iv = r'(>sp(?:\|\D[^\|]*)+\|)((?:[^\|]+\|){2})([^>]+)'
    # store all variants in a list
    variants = re.findall(iv,cline)
    # Variants Indexing Info
    # [0] header
    # [1] variant sites; variant(a-z), deletion(*)
    # [2] protein

    # make a list of full length proteins for each variant with the "\n" characters removed
    proteins = [v[2].replace('\n','') for v in variants]

    # creates a string bigS that contains all the tryptic sites found in the protein list
    m_list = []
    for n in reversed(range(1,12)):
        t = '([KR]{' + str(n) + '})'
        tr = re.compile(t)
        m_list += list(dict.fromkeys([a[0] for a in  list(filter(lambda a: a != [], [tr.findall(p) for p in proteins]))]))
    bigS = "|".join(m_list)

    # show all the possible tryptic site combinations present in the peptide list
    # print(bigS)

    # reduces peptide to 1 tryptic site
    tstring2 = '([^RKa-z]?(?:(?:'+ bigS +')?[^RKa-z]*){2}[a-z](?:(?:[^RKa-z]*(?:'+ bigS +')?){,3}[^RKa-z]*[a-z])+(?:[^RKa-z]*(?:'+ bigS +')?){2}[^RKa-z]?|[^RKa-z]?(?:(?:'+ bigS +')?[^RKa-z]*){,2}[a-z](?:[^RKa-z]*(?:'+ bigS +')?){,2}[^RKa-z]?)'
    tryp2 = re.compile(tstring2)

    # make a list of tuples containing peptides found in each variant
    tsites2 = [tryp2.findall(p) for p in proteins]

    heads = [] # master list of new headers

    for i,v in enumerate(tsites2):
        if len(v) == 1:
            heads.append(variants[i][1])
            #a+=1

        else:
            # regex for separating headers into fragments to be rearranged
            sep = '((?:\d{1,5}[a-z])|(?:[^,|]+))'
            x = re.compile(sep)
            y = x.findall(variants[i][1])

            # blank list to store the headers generated by the code below
            z = []

            # runs through each segment contained in the tsites2 entry
            for n in range(len(v)):
                # checks number of variants sites in the current segment
                l = len([p for p in tsites2[i][n] if p.islower()])
                front = "" # contains variant info
                back = "" # contains variant location
                # runs a loop x times for x number of variant sites found in the loop
                for v in range(l):
                    # pop front info off of y
                    front += str(y.pop(0))  
                    # pop back info off of x
                    back += str(y.pop(len(y)//2))
                    # add comma in between front headers if necessary
                    if v != (l-1):
                        front+= ","
                # add front and back together to form correct header for the current segment
                z.append(front + "|" + back +"|")

            # add new headers to master list
            heads.extend(z)

    # extracts all segments from their lists in tsites2 and puts them in a master list where each site is an individual string
    masterT = []
    for v in tsites2:
        masterT.extend(v)
    
    # creates a master header list to complement the master tryptic site list
    masterH = []
    for i,v in enumerate(tsites2):
        if len(v) == 1:
            masterH.append(variants[i][0])
        else:
            for n in range(len(v)):
                masterH.append(variants[i][0])    


    # writes updated fasta file to the new file
    ofile = open(new_filename, "w")
    for v in range(len(masterT)):
            ofile.write(masterH[v] + heads[v] + "\n" + masterT[v] + "\n")
    ofile.close()

